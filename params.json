{"name":"node-foreman","tagline":"A Node.js Version of Foreman","body":"# Node Foreman [![Build Status](https://travis-ci.org/strongloop/node-foreman.svg)](https://travis-ci.org/strongloop/node-foreman)\r\n\r\nNode Foreman is a Node.js version of the popular\r\n[Foreman](http://ddollar.github.com/foreman/) tool,\r\nwith a few Node specific changes.\r\n\r\n> Foreman is a manager for Procfile-based applications.\r\n> Its aim is to abstract away the details of the Procfile\r\n> format, and allow you to either run your application\r\n> directly or export it to some other process management format.\r\n\r\n## Install\r\n\r\nInstall the command line tool\r\n\r\n    $ npm install -g foreman\r\n\r\n## Deviations from the original Foreman\r\n\r\n * Each worker has an additional automatic environment variable,\r\n   `FOREMAN_WORKER_NAME`, that contains the the process name and worker number.\r\n   * example: `web.1`, `worker.1`\r\n\r\n### How to Contribute\r\n\r\nI encourage anyone and everyone to help.\r\nIf you have a specific change in mind, open an issue; we can talk about it there.\r\n\r\nIf you would like to make a code change, go ahead.\r\nFork the repository, open a pull request.\r\nDo this early, and talk about the change you want to make.\r\nMaybe we can work together on it.\r\n\r\nRefactor Refactor Refactor!\r\nYou are free to add features, or just help clean things up.\r\n\r\n## Usage\r\n\r\nNode Foreman can be run with as little as `nf start`, as long as `npm start` has been defined.\r\nFor more complicated applications you will want to define a `Procfile` for your various server\r\nprocesses and and a `.env` file to preload environmental variables.\r\n\r\nYour module directory should end up looking like the following:\r\n\r\n![List Foreman Directory](https://raw.github.com/strongloop/node-foreman/master/assets/foreman-ls.png)\r\n\r\nOnce your Procfile is defined, run your application with `nf start`:\r\n\r\n![Start Foreman](https://raw.github.com/strongloop/node-foreman/master/assets/foreman-start.png)\r\n\r\nNode Foreman _always_ starts in the foreground and expects your applications\r\nto do the same. If your processes exit, Node Foreman will assume an error\r\nhas ocurred and shut your application down.\r\n\r\nInstead of daemonizing, you should use `nf export` to ready your application\r\nfor production.\r\n\r\nFor more information try any of the following:\r\n\r\n\t$ nf --help\r\n\t$ nf start --help\r\n\t$ nf export --help\r\n\r\n### Procfile\r\n\r\nThe `Procfile` format is a simple `key : command` format:\r\n\r\n    web: node web_server.js\r\n    api: node api_server.js\r\n    log: node log_server.js\r\n\r\nEach line should contain a separate process.\r\n\r\n### Environmental Variables\r\n\r\nCreate a `.env` file to pre-load environmental variables with the format:\r\n\r\n    MYSQL_NAME=superman\r\n    MYSQL_PASS=cryptonite\r\n\r\nThe equivalent `.env` file may alternatively be a valid JSON document:\r\n\r\n    {\r\n        \"mysql\":{\r\n            \"name\": \"superman\",\r\n            \"pass\": \"cryptonite\"\r\n        }\r\n    }\r\n\r\nThe above JSON document will be flattened into env variables by\r\nconcatenating the nested values with an underscore.\r\nEnvironmental variables are passed in fully capitalized.\r\n\r\n    {\r\n        \"mysql\":{\r\n            \"name\": \"superman\",     # => MYSQL_NAME=superman\r\n            \"pass\": \"cryptonite\"    # => MYSQL_PASS=cryptonite\r\n        }\r\n    }\r\n\r\nThere is no need to specify which type of file you wish to use.\r\n\r\n#### The PATH environment variable\r\n\r\nThe `PATH` variable is given special treament and is always read\r\nfrom the environment that the `nf` command has been executed from,\r\nrather than a `.env` file.  To set a different `PATH` execute\r\n`nf` with the `PATH` variable set appropriately.\r\n\r\n```bash\r\nPATH=/opt/foo:/opt/bar:$PATH nf export\r\n```\r\n\r\n#### Best Practices\r\n\r\nGenerally you should not check your `.env` file into version control.\r\nThe `.env` file contain _only_ parameters that depend on where the application\r\ngets deployed. It should not contain anything related to _how_ the application\r\nis deployed.\r\n\r\nFor example, good candidates for the `.env` file are MySQL connection information,\r\nport bindings, and other passwords.\r\n\r\n### Advanced Usage\r\n\r\nNode Foreman lets you start multiple jobs of the same type:\r\n\r\n    $ nf start web=5\r\n\r\n    18:51:12: web.1     |  Web Server started listening on 0.0.0.0:5000\r\n    18:51:12: web.2     |  Web Server started listening on 0.0.0.0:5001\r\n    18:51:12: web.3     |  Web Server started listening on 0.0.0.0:5002\r\n    18:51:12: web.4     |  Web Server started listening on 0.0.0.0:5003\r\n    18:51:12: web.5     |  Web Server started listening on 0.0.0.0:5004\r\n\r\nEach job will be started as its own process, receiving a different `PORT`\r\nenvironmental variable.\r\nThe port number for processes of the same type will be offset by 1.\r\nThe port number for processes of different types will be offset by 100.\r\n\r\n    $ nf start web=2,api=2\r\n\r\n    18:51:12: web.1     |  Web Server started listening on 0.0.0.0:5000\r\n    18:51:12: web.2     |  Web Server started listening on 0.0.0.0:5001\r\n    18:51:12: api.1     |  Api Server started listening on 0.0.0.0:5100\r\n    18:51:12: api.2     |  Api Server started listening on 0.0.0.0:5101\r\n\r\n## Export to Production\r\n\r\nNode Foreman is designed to be in a development environment,\r\nhowever it can export an Upstart job for use in production.\r\nThe Upstart file has _no_ dependency on Node Foreman.\r\n\r\n    $ nf export\r\n    Loaded ENV .env File as JSON Format\r\n    Wrote  :  ./foreman-web-1.conf\r\n    Wrote  :  ./foreman-web.conf\r\n    Wrote  :  ./foreman-api-1.conf\r\n    Wrote  :  ./foreman-api.conf\r\n    Wrote  :  ./foreman-log-1.conf\r\n    Wrote  :  ./foreman-log.conf\r\n    Wrote  :  ./foreman.conf\r\n\r\nYou can inspect your upstart files before placing them in the right\r\ndirectory, or have foreman do it for you:\r\n\r\n    $ sudo nf export -o /etc/init\r\n    Loaded ENV .env File as JSON Format\r\n    Wrote  :  /etc/init/foreman-api-1.conf\r\n    Wrote  :  /etc/init/foreman-web.conf\r\n    Wrote  :  /etc/init/foreman-api.conf\r\n    Wrote  :  /etc/init/foreman-log.conf\r\n    Wrote  :  /etc/init/foreman-log-1.conf\r\n    Wrote  :  /etc/init/foreman-web-1.conf\r\n    Wrote  :  /etc/init/foreman.conf\r\n\r\nStart and stop your jobs with\r\n\r\n    $ sudo start foreman\r\n    $ sudo stop foreman\r\n\r\nThe export will occur with whatever environmental variables are\r\nlisted in the .env file.\r\n\r\n### Systemd Support\r\n\r\n_This section is beta_\r\n\r\nOptionally specify a type `-t systemd` during export for [systemd](http://www.freedesktop.org/wiki/Software/systemd) support.\r\n\r\n### Supervisord Support\r\n\r\nYou can also use a type `-t supervisord` during export for [supervisord](http://www.supervisord.org) support.\r\n\r\nThis will generate a `APP.conf` file grouping the application processes and a `APP-PROCESS-N.conf` file for each process.\r\n\r\n    $ nf export --type supervisord\r\n    Loaded ENV .env File as JSON Format\r\n    Wrote  :  ./foreman-web-1.conf\r\n    Wrote  :  ./foreman-api-1.conf\r\n    Wrote  :  ./foreman-log-1.conf\r\n    Wrote  :  ./foreman.conf\r\n\r\nYou can start / stop / restart individual processes.\r\n\r\n    $ sudo supervisorctl start 'foreman:foreman-web-1'\r\n    $ sudo supervisorctl stop 'foreman:foreman-web-1'\r\n    $ sudo supervisorctl restart 'foreman:foreman-web-1'\r\n\r\nOr the entire group of processes\r\n\r\n    $ sudo supervisorctl start 'foreman:*'\r\n    $ sudo supervisorctl stop 'foreman:*'\r\n    $ sudo supervisorctl restart 'foreman:*'\r\n\r\n### Advanced Exports\r\n\r\nYou can specify the type and number of processes exported using\r\nthe `type=num` syntax:\r\n\r\n    $ nf export web=2,api=2\r\n\r\nUse `-u <USER>` to have the exported job run as `USER`.\r\nNote that if you need to bind to privileged ports, you _must_\r\nstart as `root`. In such a case, we advise you to drop user\r\npermissions after binding.\r\n\r\nIf you want to call your upstart job something other than foreman,\r\nuse `-a <JOBNAME>` and manage your jobs with `sudo start <JOBNAME>`.\r\n\r\n## Reverse Proxy\r\n\r\nNode.js processes are supposed to be stateless.\r\nApplication scale by starting multiple processes that either share a socket,\r\nor sit behind a load balancer.\r\nNode Foreman can help you test the parallel capabilities of your application\r\nby spawning multiple processes behind a round-robin proxy automatically.\r\n\r\n\t$ nf start -x 8888 web=5\r\n\t[OKAY] Starting Proxy Server 8888 -> 5000-5004\r\n\r\nAccess your application from port `8888` and the connections will be balanced\r\nacross the servers started from ports `5000` - `5004`.\r\n\r\nIf your application gets its port number from `process.env.PORT` the proxy\r\nsetup will ocurr automatically.\r\n\r\n### Multiple Reverse Proxies\r\n\r\nIf you have multiple processes in your `Procfile` you can start multiple proxies.\r\n\r\n    $ nf start -x 8888,8080,9090\r\n\r\nThis will start 3 separate proxies and bind each to a separate process group.\r\nProxies are bound based on their order specified, their order in the Procfile,\r\nor by their order on the command line.\r\n\r\n    $ nf start -x 8888,9999 web,api\r\n\r\n### Privileged Ports\r\n\r\nNode Foreman disallows applications from starting on privileged ports.\r\nIt does however allow proxies to be bound to lower ports, such as port 80.\r\n\r\nIf you require access to a privileged port, start Node Foreman with `sudo`:\r\n\r\n\t$ sudo nf start -x 80 web=5\r\n\t[OKAY] Starting Proxy Server 80 -> 5000-5004\r\n\r\nYour application will then be accessible via port 80.\r\n\r\nYour applications will _still_ be started in user space, and the proxy will\r\ndrop its privileges after binding to the privileged port.\r\n\r\n## Forward Proxy\r\n\r\nLocal development and testing has huge advantages,\r\nbut sometimes one needs to test web applications agains their real-world domain name.\r\nEditing `/etc/hosts` is a pain however, and error prone.\r\n\r\nNode Foreman can start up an HTTP forward proxy which your browser can route requests through.\r\nThe forward proxy will intercept requests based on domain name, and route them to the local application.\r\n\r\n    $ nf start -f 9999 -h nodefly.com\r\n    [OKAY] Forward Proxy Started in Port 9999\r\n    [OKAY] Intercepting requests to nodefly.com through forward proxy\r\n\r\nA forward proxy is useful when testing OAuth, or other external services with application callbacks.\r\n\r\nFor users with Google Chrome, this can be paired with [Proxy Switch Sharp](http://switchy.samabox.com/) for great results.\r\n","google":"UA-37775386-1","note":"Don't delete this file! It's used internally to help with page regeneration."}